/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.4 scene.gltf --transform
Author: nimzu (https://sketchfab.com/nimzuk)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/foxs-islands-163b68e09fcc47618450150be7785907
Title: Fox's islands
*/

import * as THREE from "three";
import { useFrame, useThree } from "@react-three/fiber";
import React, { useEffect, useRef, useState, useMemo } from "react";
import { useGLTF } from "@react-three/drei";
import useGUI from "../../useGUI";
import { useSpring, a } from "@react-spring/three";
import scenePath from "./scene-transformed.glb";

export function Model({ ...props }) {
  const { nodes, materials } = useGLTF(scenePath);

  const { viewport } = useThree();
  const islandGroup = useRef();
  const [rotation, setRotation] = useState(0); // Store rotation state
  const [isDragging, setIsDragging] = useState(false); // Track if currently dragging
  const [lastX, setLastX] = useState(0); // Store the last mouse x position

  // Handle mouse drag start
  const handlePointerDown = (event) => {
    setIsDragging(true);
    setLastX(event.clientX);
  };

  // Handle mouse drag end
  const handlePointerUp = () => {
    setIsDragging(false);
  };

  // Handle mouse drag
  const handlePointerMove = (event) => {
    if (isDragging) {
      const delta = (event.clientX - lastX) / viewport.width; // Calculate change in x position
      const newRotation = rotation + delta * 0.01 * Math.PI; // Modify this line, use Math.PI instead of 2 * Math.PI
      setRotation(newRotation);
      setLastX(event.clientX); // Update last x position
    }
  };

  // Register event handlers
  useEffect(() => {
    window.addEventListener("pointerdown", handlePointerDown);
    window.addEventListener("pointerup", handlePointerUp);
    window.addEventListener("pointermove", handlePointerMove);
    return () => {
      window.removeEventListener("pointerdown", handlePointerDown);
      window.removeEventListener("pointerup", handlePointerUp);
      window.removeEventListener("pointermove", handlePointerMove);
    };
  }, [handlePointerDown, handlePointerUp, handlePointerMove]);

  // Rotate island group based on state
  useFrame(() => {
    if (islandGroup.current) {
      islandGroup.current.rotation.y = rotation;
    }
  });

  const sectionThresholds = [Math.PI / 2, Math.PI, (3 * Math.PI) / 2]; // Example for 4 sections

  useEffect(() => {
    const normalizedRotation =
      ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI); // Normalize to [0, 2*Math.PI]

    let sectionIndex = 0;
    while (
      sectionIndex < sectionThresholds.length &&
      normalizedRotation >= sectionThresholds[sectionIndex]
    ) {
      sectionIndex++;
    }

    props.setCurrentStage(sectionIndex + 1); // Update currentStage passed as a prop, and add 1 to make it 1-based
  }, [rotation]);

  return (
    <a.group ref={islandGroup} {...props} dispose={null}>
      <mesh
        geometry={nodes.polySurface944_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface945_tree1_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface946_tree2_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface947_tree1_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface948_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface949_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.pCube11_rocks1_0.geometry}
        material={materials.PaletteMaterial001}
      />
    </a.group>
  );
}

useGLTF.preload(scenePath);
